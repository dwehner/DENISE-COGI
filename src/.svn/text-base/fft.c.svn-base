/*
  ------------------------------------------------------------------------

  This file contains FFT-related functions:
  
  short	FFT(short int dir,long m,float *x,float *y);
  short	FFTD(short int dir,long m,double *x,double *y)
  void	FFTNR(int isign, unsigned long nn, double *re, double *im)
  void	ifftshift(float *vec, int npad);
  void	fft2(float **RE, float **IM, int ny, int nx, int dir);
  void	fft2shift(float **RE, float **IM, int ny, int nx);
  int	nextN_pow2(int n, int pow2step);
 

  FFT:		This computes an in-place complex-to-complex FFT.
		x and y are the real and imaginary vectors of 2^m points.
		dir =  1 gives forward transform
		dir = -1 gives reverse transform 

  FFTD:		Double precision version of FFT.

  FFTNR:	FFT from Numerical Recipes

  ifftshift:	Swapping the left and the right halves of a vector
  
  fft2		This computes the 2D FFT.
		RE and IM are the real and imaginary arrays of 2^m points
		in all dimensions.
		dir =  1 gives forward transform
		dir = -1 gives reverse transform
		
  fft2shift	Shift the high-frequency content to the center of the
  		spectrum
		
  nextN_pow2	Compute the next m-higher power of 2.
  
  ------------------------------------------------------------------------
*/



#include "fd.h"
			
/********************************************************/
/* FFT from Numerical Recipes				*/
/********************************************************/

/*
From Numerical recipes:

Input and output arrays for FFT. (a) The input array contains N (a power of 2)
complex time samples in a real array of length 2N , with real and imaginary parts alternating. (b) The
output array contains the complex Fourier spectrum at N values of frequency. Real and imaginary parts
again alternate. The array starts with zero frequency, works up to the most positive frequency (which
is ambiguous with the most negative frequency). Negative frequencies follow, from the second-most
negative up to the frequency just below zero.

Replaces data[1..2*nn] by its discrete Fourier transform, if isign is input as 1; or replaces
data[1..2*nn] by nn times its inverse discrete Fourier transform, if isign is input as ?1.
data is a complex array of length nn or, equivalently, a real array of length 2*nn. nn MUST
be an integer power of 2 (this is not checked for!).
*/

#define SWAP(a,b) tempr=(a);(a)=(b);(b)=tempr

void	FFT(int isign, unsigned long nlog, float *re, float *im)
{
	unsigned long	n,nn,mmax,m,j,istep,i;
	double		wtemp,wr,wpr,wpi,wi,theta;                     /*Double precision for the trigonometric recurrences.*/
	double		tempr,tempi;
	float           *data=NULL;
	
	
	nn = 2 << (nlog-1);	/* adapt the number of samples to the call of the function FFT() (see above) */
	
	n=nn << 1;

	/* convert user data to a format which is compatible to this FFT */
	data = vector(1,n);
	for (i=1;i<=nn;i++) {
		data[(i<<1)-1] = re[i];
		data[(i<<1)]   = im[i];
	}

	/* FFT */
	j=1;
	for (i=1;i<n;i+=2) {                                  /*This is the bit-reversal section of the*/
		if (j > i) {                                     /*     routine.*/
			SWAP(data[j],data[i]);                       /*Exchange the two complex numbers.*/
			SWAP(data[j+1],data[i+1]);
		}
		m=nn;
		while (m >= 2 && j > m) {
			j -= m;
			m >>= 1;
		}
		j += m;
	}

	/*Here begins the Danielson-Lanczos section of the routine.*/
	mmax=2;
	while (n > mmax) {                                    /*Outer loop executed log2 nn times.*/
		istep=mmax << 1;
		theta=isign*(6.28318530717959/mmax);             /*Initialize the trigonometric recurrence.*/
		wtemp=sin(0.5*theta);
		wpr = -2.0*wtemp*wtemp;
		wpi=sin(theta);
		wr=1.0;
		wi=0.0;
		for (m=1;m<mmax;m+=2) {                /*Here are the two nested inner loops.*/
			for (i=m;i<=n;i+=istep) {
				j=i+mmax;                      /*This is the Danielson-Lanczos formula*/
				tempr=wr*data[j]-wi*data[j+1];
				tempi=wr*data[j+1]+wi*data[j];
				data[j]=data[i]-tempr;
				data[j+1]=data[i+1]-tempi;
				data[i] += tempr;
				data[i+1] += tempi;
			}
			wr=(wtemp=wr)*wpr-wi*wpi+wr;       /*Trigonometric recurrence.*/
			wi=wi*wpr+wtemp*wpi+wi;
		}
		mmax=istep;
	}

	/* convert data back to user format */
	for (i=1;i<=nn;i++) {
		re[i] = data[(i<<1)-1];
		im[i] = data[(i<<1)];
	}
	free_vector(data, 1,n);
}



/********************************************************/
/* 1D-IFFTSHIFT						*/
/********************************************************/
void	ifftshift(float *vec, int npad) {

	int		n;
	float		*tmp;
	
	
	tmp = vector(1,npad);
	
	/* modify the last value in vec, because it is 0 */
	vec[npad] = (vec[npad-1]+vec[1])/2;

	for (n=1;n<=npad;n++)	tmp[n] = vec[n];
	for (n=1;n<=npad/2;n++)	vec[n] = tmp[npad/2-n+1];
	for (n=1;n<=npad/2;n++)	vec[n+npad/2] = tmp[npad-n+1];
	
	
	free_vector(tmp, 1, npad);
}



/********************************************************/
/* 2D-FFT						*/
/* Overhead function to make usage of FFT2D easier	*/
/********************************************************/
/*void	fft2(float **RE, float **IM, int ny, int nx, int dir) {

	COMPLEX	*C;
	int	j, i, k;
	
	
	C = cplxvector(1, nx*ny);
	
	if (dir==1) {
		k = 1;
		for (i=1;i<=nx;i++)
			for (j=1;j<=ny;j++) {
				C[k].re = RE[j][i];
				C[k].im = 0.0;
				k++;
			}
		forward_fft2f(C, ny, nx);
		k = 1;
		for (i=1;i<=nx;i++)
			for (j=1;j<=ny;j++) {
				RE[j][i] = C[k].re;
				IM[j][i] = C[k].im;
				k++;
			}
	} else {
		k = 1;
		for (i=1;i<=nx;i++)
			for (j=1;j<=ny;j++) {
				C[k].re = RE[j][i];
				C[k].im = IM[j][i];
				k++;
			}
		inverse_fft2f(C, ny, nx);
		k = 1;
		for (i=1;i<=nx;i++)
			for (j=1;j<=ny;j++) {
				RE[j][i] = C[k].re;
				IM[j][i] = 0.0;
				k++;
			}
	}
	
	free_cplxvector(C, 1, nx*ny);
}*/



/********************************************************/
/* 2D-FFTSHIFT						*/
/********************************************************/
void	fft2shift(float **RE, float **IM, int ny, int nx) {

	int	j, i;
	float	**A;
		
	
	A = matrix(1, ny, 1, nx);
	
	/* shift the real part */
	for (i=1;i<=nx;i++)
		for (j=1;j<=ny;j++)	A[j][i] = RE[j][i];
	for (i=1;i<=nx/2;i++)
		for (j=1;j<=ny/2;j++) {
			RE[j][i]		= A[j+ny/2][i+nx/2];
			RE[j+ny/2][i+nx/2]	= A[j][i];
			RE[j+ny/2][i]		= A[j][i+nx/2];
			RE[j][i+nx/2]		= A[j+ny/2][i];
		}

	/* shift the imaginary part */
	for (i=1;i<=nx;i++)
		for (j=1;j<=ny;j++)	A[j][i] = IM[j][i];
	for (i=1;i<=nx/2;i++)
		for (j=1;j<=ny/2;j++) {
			IM[j][i]		= A[j+ny/2][i+nx/2];
			IM[j+ny/2][i+nx/2]	= A[j][i];
			IM[j+ny/2][i]		= A[j][i+nx/2];
			IM[j][i+nx/2]		= A[j+ny/2][i];
		}
	
	free_matrix(A, 1, ny, 1, nx);
}



/********************************************************/
/* Nnew = 2^next_power_of_2(Nold)			*/
/********************************************************/
int	nextN_pow2(int n, int pow2step){

	float	expo;
	int	newn;
	
	expo = ceil(log(n)/log(2));
	newn = (int)(pow(2,expo+pow2step));

	return(newn);	
}


